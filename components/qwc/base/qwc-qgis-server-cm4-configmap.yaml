apiVersion: v1
data:
  __init__.py: |
    #
    # Copyright (c) 2024 Sandro Mani, Sourcepole AG
    #
    # This program is free software: you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation, version 3.
    #
    # This program is distributed in the hope that it will be useful, but
    # WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    # General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program. If not, see <http://www.gnu.org/licenses/>.
    #

    from .filter_geom import FilterGeom


    def serverClassFactory(serverIface):
        return FilterGeom(serverIface)
  filter_geom.py: "#\n# Copyright (c) 2024 Sandro Mani, Sourcepole AG\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, version 3.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n\nfrom qgis.core import *\nfrom qgis.server import *\nfrom qgis.PyQt.QtCore import QFile, QIODevice\nfrom qgis.PyQt.QtXml import QDomDocument\nimport os\n\nclass FilterGeomFilter(QgsServerFilter):\n    def __init__(self, serverIface):\n        super(FilterGeomFilter, self).__init__(serverIface)\n        self.__layouts = []\n        self.__project = None\n        \n    def onRequestReady(self):\n        \n        # Only apply FILTER_GEOM to GetMap and GetLegendGraphics. GetFeatureInfo already honours it\n        request = self.serverInterface().requestHandler()\n        requestParam = request.parameter('REQUEST').upper()\n        filterGeomParam = request.parameter('FILTER_GEOM')\n        filterParam = request.parameter('FILTER')\n        layersParam = request.parameter('LAYERS').split(\",\")\n        crsParam = request.parameter('SRS')\n        if not crsParam:\n            crsParam = request.parameter('CRS')\n        srid = crsParam[5:]\n        if not requestParam in ['GETMAP', 'GETLEGENDGRAPHICS', 'GETPRINT'] or not filterGeomParam:\n            return True\n\n        # Inject st_intersects and st_geomfromtext tokens if necessary\n        extraTokens = [token.lower() for token in filter(bool, os.getenv(\"QGIS_SERVER_ALLOWED_EXTRA_SQL_TOKENS\", \"\").split(\",\"))]\n        changed = False\n        for token in [\"st_intersects\", \"st_geomfromtext\"]:\n            if not token in extraTokens:\n                extraTokens.append(token)\n                changed = True\n        if changed:\n            os.environ[\"QGIS_SERVER_ALLOWED_EXTRA_SQL_TOKENS\"] = \",\".join(extraTokens)\n            self.serverInterface().reloadSettings()\n            # QgsMessageLog.logMessage(\n            #     f\"XXX Altered QGIS_SERVER_ALLOWED_EXTRA_SQL_TOKENS to %s\" % (\",\".join(extraTokens)), \"FilterGeom\", Qgis.MessageLevel.Info\n            # )\n\n        projectPath = self.serverInterface().configFilePath()\n        project = QgsConfigCache.instance().project(projectPath)\n        filters = dict(map(lambda entry: entry.split(\":\"), filter(bool, filterParam.split(\";\"))))\n\n        # Append geometry filter expression to all postgis layers\n        for layer in project.mapLayers().values():\n\n            layername = layer.shortName()\n            if QgsServerProjectUtils.wmsUseLayerIds(project):\n                layername = layer.id()\n            elif not layername:\n                layername = layer.name()\n\n            if not layername in layersParam:\n                continue\n\n            filterExpr = None\n            if layer.providerType() == \"postgres\":\n                geomColumn = QgsDataSourceUri(layer.source()).geometryColumn()\n                filterExpr = \"ST_Intersects ( \\\"%s\\\" , ST_GeomFromText ( '%s' , %s ) )\" % (geomColumn, filterGeomParam, srid)\n            # elif layer.providerType() == \"ogr\" and layer.source().split(\"|\")[0].lower().endswith(\".gpkg\"):\n            #     tablename = layer.source().split('layername=')[-1]\n            #     geomColumn = QgsMapLayerUtils.databaseConnection(layer).table('', tablename).geometryColumn()\n            #     filterExpr = \"ST_Intersects ( \\\"%s\\\" , ST_GeomFromText ( '%s' , %s ) )\" % (geomColumn, filterGeomParam, srid)\n\n            if filterExpr:\n                if layername in filters:\n                    filters[layername] += \" AND \" + filterExpr\n                else:\n                    filters[layername] = filterExpr\n\n                # QgsMessageLog.logMessage(\n                #     f\"XXX New filter for %s = %s\" % (layername, filters[layername]), \"FilterGeom\", Qgis.MessageLevel.Info\n                # )\n\n        request.setParameter('FILTER', \";\".join(map(lambda entry: \":\".join(entry), filters.items())))\n        request.removeParameter('FILTER_GEOM')\n\n        if requestParam == 'GETPRINT':\n            prefix = self.get_map_param_prefix(request.parameterMap())\n            request.setParameter(prefix + ':FILTER', \";\".join(map(lambda entry: \":\".join(entry), filters.items())))\n            request.removeParameter(prefix + ':FILTER_GEOM')\n\n        return True\n\n    def get_map_param_prefix(self, params):\n        # Deduce map name by looking for param which ends with :EXTENT\n        # (Can't look for param ending with :LAYERS as there might be i.e. A:LAYERS for the external layer definition A)\n        mapname = \"\"\n        for key, value in params.items():\n            if key.endswith(\":EXTENT\"):\n                return key[0:-7]\n        return \"\"\n\nclass FilterGeom:\n    def __init__(self, serverIface):\n        self.iface = serverIface\n        serverIface.registerFilter(FilterGeomFilter(serverIface))\n"
  metadata.txt: |
    [general]
    name=FilterGeom
    qgisMinimumVersion=3.4
    qgisMaximumVersion=3.99
    description=A plugin to add FILTER_GEOM support to WMS GetMap
    version=version 1.0
    author=Sandro Mani
    email=smani@sourcepole.ch
    server=True
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: qwc-qgis-server
  name: qwc-qgis-server-cm4
